        Open64 Compiler Version 3.0 Release Notes (Beta)

                November 20, 2006

1. Overview
2. The Packages of the Compiler Suite
3. Installing the Compiler Suite
4. Build the compiler Suite - directly from source
  4.1 Prerequisites
  4.2 Build Steps
  4.3 Build Fortran Front-End
  4.4 Some Notes on Build
5. Bug Reporting
6. Known Problems, Limitation and Some Notes
7. Credits


1. Overview
=============
 
 The objective of the Osprey project is to bring the Open64 compiler
 to that of a production quality compiler and catch up wit the GCC/G++
 features evolution. In this release, the team has updated the GCC/G++
 front end to GCC3.2, which contains a large portion of the Itanium
 C++ ABI support. The object files generated are now compliant to the
 Itanium ABI. The object files from an Itanium Linux ABI compiler can
 be freely mixed with those generated with this compiler release. This
 compiler has managed to boot the Linux kernel with only some minor
 source workaround. Testing of this compiler is done on Itanium
 natively. Most importantly, the source code of all previous archives
 is merged into one subversion tree and it is readily available for
 researchers and developers to join the development and incrementally
 check in changes. The website for that is 
 http://www.open64.net/
 
 The release consists of two packages. A suite of pre-built compiler
 binaries that includes C, C++, F95 and related archives, and a suite
 of corresponding compiler source codes. The pre-built compilers are
 build using a self-build bootstrap process.

 We have successfully built all programs in SPEC2K, both integer and
 floating point, at O2 and O3 optimization levels. The performance of
 SPEC2Kfp and SPEC2006fp is 55% and about 77% better than that of
 GCC4.1. On other C++ high performance applications, we have measured
 about 24% (geometric mean) speed up against GCC4.1. The comparison
 with GCC are approximation since we are not able to build all the
 SPEC2006 programs with GCC4.1 when we do the comparison.

 We will aggressively continue to update the GCC/G++ front end to the
 latest version after this release. Another important focus after this
 release is further performance improvement in the HPC area. We are
 looking forward for collaboration from the open source community for
 this effort. The SVN source control and Bugzilla system is built up
 to facilitate this. Our checkin testing will be continuously improved
 to achieve the "checkin early and checkin fast with little to no
 impact to overall quality" development environment.

 For a more detailed description of our kernel boot work-arounds and
 procedure, our performance comparison numbers, please send mail to
 http://sourceforge.net/projects/open64.
  


2.The Packages of the Compiler Suite
======================================

 This compiler is available in both in binary and source-code form.

 o: open64-3.0-bin.tar.gz
   This package contains all compiler components as well as pre-built
   archives.

 o. open64-3.0-src.tar.gz
   This package contains all the source code for the compiler, as well as
   pre-built archives.

   Both packages have been compiled and tested on the AS4.0 systems.

3. Installing the Compiler Suite
=================================

 Before installing the compiler, the environment variable $TOOLROOT
 should be set properly. As the name suggests, this variable specifies
 the root of the installation hierarchy. You can set it to anywhere
 you have write permission. For example, in GNU BASH this may be done
 with the following command: may set this variable by adding this
 command to the $HOME/.bash_profile file:
   export TOOLROOT=$HOME/mycompiler
 
 After that, run 'source $HOME/.bash_profile' to make the change effective

 Now, to complete the installation:
 o. expand open64-3.0-bin.tar.gz with the command:
    tar zxvf open64-3.0-bin.tar.gz
 o. Run script 'INSTALL.sh'

 The C, C++, Fortran compilers are now available in folder
 $TOOLROOT/usr/bin/. They are opencc, openCC, openf90 respectively.

4. Build the compiler Suite - directly from source
====================================================

 If you choose to build the compiler suite from the source tar ball,
 follow the steps outlined below.

4.1 Prerequisites
-------------------
 In order to compile Open64 successfully, your system should meet the
 following requirements:

 o.Linux/IA64 OS
    Open64 as well as its variants have been successfully built on many Unix
  variants and Unix-like systems. This release has only been tested extensively
  on IA64 architectures running Linux operating systems. If you are going to
  build it on any platform other than Linux/IA64, you may need to make some
  minior changes to the source code.

 o.GNU Compiler Collection
    Currently, GCC 3.2.x through 3.4.x are supported.

 o.Intel Fortran Compiler (optional)
    The Fortran front-end executable is available in *BOTH* source and binary
  packages. If you are going to build the front-end by youself, the Intel
  Fortran Compiler should be installed properly prior to the build. A free
  version for noncommercial use is available at
http://www3.intel.com/cd/software/products/asmo-na/eng/download/download/index.htm

4.2 Build Steps
-------------------
  Follow these steps to build the compiler:

 Step 1. Expand the source tarball
   After that, the whole source hierarchy will be in directory rooted at
   open64-3.0/. Change working directory to open64-3.0/.

 Step 2. Build the compiler components by simply invoking command:
     make -f Make.native.
     If you want to build a debuggable compiler, use this command instead:
     make BUILD_OPTIMIZE=DEBUG -f Make.native

  Developers may find this command handy in building individual component,
  say wopt.so:
     make BUILD_OPTIMIZE=DEBUG wopt.so -f Make.native

 step 3. (optional): If you want to build the Fortran front-end by yourself,
  read section 4.3 for the details. The pre-built executable is provided in
  the source package. Normally, you don't need to build one. If you decide
  to use the pre-built front-end executable, simply skip this step.

 step 4. set environment variable TOOLROOT to anywhere you have write
  permission as detailed in section 3.

 step 5. call 'make install -f Make.native' or 'INSTALL.native' to install
  all compiler components and archives.

 The C, C++, Fortran compilers are now available in folder
 $TOOLROOT/usr/bin/ They are opencc, openCC, openf90 respectively.

4.3.Build Fortran Front-End
-------------------------------
 The Fortran front-end executable for IA64 system is provided in both
 binary and source packages. Normally, you need *NOT* to build it by yourself.

 If you are going to build one, make sure the Intel Fortran Compiler
 suite is installed properly as mentioned above.

 Currently, the path(s) for Intel's Fortran Compiler are hardwired in
 source file 'kpro64/linux/make/gcommondefs'. You probably need to
 change variable 'F90' (line 102) and 'F90_RTLIBS'(line 103) in that
 file to reflect your setup.

 If everything is ready, use this command to bulid the front-end:
     make mfef95 -f Make.native

4.4 Some Notes on Build
--------------------------

 o.The compiler is built with flag '-Werror' which treats warnings as error.
  If the build process terminates due to warnings, you can get around this
  with:
      make ... ERROR_ON_WARNINGS="" ...
  i.e. simply repeat the make process with ERROR_ON_WARNINGS="".

 o.GNU Make utility version 3.81 is shipped with many of the latest Linux
  distributions. Building the compiler suite with it may cause some weird
  complaints pertaining to dependent files don't exist (they are actually
  there). You can ignore those complaints, and repeat the make command to
  continue.

5. Bug Reporting
==================

   You are WELCOME to report bugs. The bugs tracked at
   http://bugs.open64.net/. Bug reports should include these items in
   order to be reproduced:
 o. the compiler release version;
 o. system details -- the OS, libc etc;
 o. the compilation flags that trigger the bug;
 o. the test file if applicable (it is highly appreciated if the test file
   is minimized);
 o. the correct output of the test file.

6. Known Problems, Limitation and Some Notes
==============================================

 o.Due to limited resources, the archives shipped with this compiler may
  not be built successfully from the source.  In addition, the name of the
  makefile 'Make.NUE.lib', which is used to build the archives on Linux/IA64,
  is misleading

 o.Currently, we build the compiler *ONLY* on Linux/IA64 with 'Make.native'.
  'Make.cross' is supposed to be used to build the cross compiler on
  Linux/IA32 systems. However, we have not tested this thoroughly.

 o.The perlbmk benchmark in CPU2006 suite may not run successfully without
  some changes to its source code. It is *NOT* an Open64 bug. The problem is
  with the perlbmk benchmark itself. Please check the bug-81
  (https://bugs.open64.net/) for details. This problem can be solved by
  deleting following lines from file spec_config.h (of perlbmk benchmark):
     1172 #undef HASATTRIBUTE
     1173 #ifndef HASATTRIBUTE
     1174 #define __attribute__(_arg_)
     1175 #endif
 o.Feedback option is not well tested, Please refer to bug 215 for
  details. 
 o.at -IPA, some Fortran program may get relocation truncated to fit
  ... error message, the bug number is 219
 o.at -IPA -O2, the program gap fails to compare with reference
  input. See bug number 214.
 o.A full list of known bugs can be found in our bug database. You can visit
   http://bugs.open64.net
  to view them.


7. Credits
============

 This project is led by Shinming Liu at HP Inc. It is the result of
 partnership between Tsinghua University, Institute of Computing
 Technology at the Chinese Academy of Science, CAPSL research
 laboratory at the University of Delaware, and Hewlett-Packard, Inc.

 We'd also like to acknowledge the contributions of QLogic Inc,
 (formerly PathScale Inc.)


